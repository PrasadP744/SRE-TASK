server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push
    timeout: 30s
    backoff_config:
      min_period: 500ms
      max_period: 5m
      max_retries: 10
    # Add external labels to identify the source
    external_labels:
      cluster: docker-compose
      environment: production

scrape_configs:
  # Primary Docker container discovery
  - job_name: docker_containers
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: status
            values: ["running"]
    
    relabel_configs:
      # Extract container name
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container_name'
      
      # Short container ID
      - source_labels: ['__meta_docker_container_id']
        regex: '([a-f0-9]{12}).*'
        target_label: 'container_id'
      
      # Image name
      - source_labels: ['__meta_docker_container_image']
        target_label: 'image'
      
      # Compose service
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'service'
      
      # Compose project
      - source_labels: ['__meta_docker_container_label_com_docker_compose_project']
        target_label: 'project'
      
      # Network mode
      - source_labels: ['__meta_docker_network_mode']
        target_label: 'network_mode'

    pipeline_stages:
      # Parse Docker logs
      - docker: {}
      
      # Extract multiline logs (for stack traces, etc.)
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2}'
          max_wait_time: 3s
      
      # Try to parse JSON logs
      - match:
          selector: '{container_name=~".+"}'
          stages:
            - json:
                expressions:
                  level: level
                  msg: message
                  time: timestamp
            - labels:
                level:
            - timestamp:
                format: RFC3339
                source: time
            - output:
                source: msg
      
      # Fallback for non-JSON logs
      - match:
          selector: '{container_name=~".+"} |~ "^(?i)(error|warn|info|debug)"'
          stages:
            - regex:
                expression: '^(?i)(?P<level>error|warn|info|debug)'
            - labels:
                level:
      
      # Add static labels
      - static_labels:
          source: docker
      
      # Rate limiting
      - limit:
          rate: 5000
          burst: 10000
          drop: false

  # System logs for debugging
  - job_name: system_logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: system
          source: host
          __path__: /var/log/syslog
    
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<hostname>\S+)\s+(?P<service>\S+?)(\[(?P<pid>\d+)\])?\s*:\s*(?P<message>.*)'
      - labels:
          hostname:
          service:
      - timestamp:
          format: 'Jan 02 15:04:05'
          source: timestamp
      - output:
          source: message
